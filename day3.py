"""
Brainstorming:
- make a list of every coordinate each wire touches, based on the directional input
- compare the lists, find the common coordinates
- calculate the taxicab distance for each coordinate set (for points p1,q1 and p2,q2 = abs(p1-q1) + abs(p2-q2))
"""

# w1 = []
# w2 = []

w1 = [("R",999),("U",626),("R",854),("D",200),("R",696),("D",464),("R",54),("D",246),("L",359),("U",57),("R",994),("D",813),("L",889),("U",238),("L",165),("U",970),("L",773),("D",904),("L",693),("U",512),("R",126),("D",421),("R",732),("D",441),("R",453),("D",349),("R",874),("D",931),("R",103),("D",794),("R",934),("U",326),("L",433),("D",593),("L",984),("U",376),("R",947),("U",479),("R",533),("U",418),("R",117),("D",395),("L",553),("D",647),("R",931),("D",665),("L",176),("U",591),("L",346),("D",199),("L",855),("D",324),("L",474),("U",251),("R",492),("D",567),("L",97),("D",936),("L",683),("U",192),("R",198),("U",706),("L",339),("U",66),("R",726),("D",102),("R",274),("U",351),("R",653),("D",602),("L",695),("U",921),("R",890),("D",654),("R",981),("U",351),("R",15),("U",672),("R",856),("D",319),("R",102),("D",234),("R",248),("U",169),("L",863),("U",375),("L",412),("U",75),("L",511),("U",298),("L",303),("U",448),("R",445),("U",638),("L",351),("D",312),("R",768),("D",303),("L",999),("D",409),("L",746),("U",266),("L",16),("U",415),("L",951),("D",763),("L",976),("U",342),("L",505),("U",770),("L",228),("D",396),("L",992),("U",3),("R",243),("D",794),("L",496),("U",611),("R",587),("U",772),("L",306),("D",119),("L",470),("D",490),("L",336),("U",518),("L",734),("D",654),("L",150),("U",581),("L",874),("U",691),("L",243),("U",94),("L",9),("D",582),("L",402),("U",563),("R",468),("U",96),("L",311),("D",10),("R",232),("U",762),("R",630),("D",1),("L",674),("U",685),("R",240),("D",907),("R",394),("U",703),("L",64),("U",397),("L",810),("D",272),("L",996),("D",954),("R",797),("U",789),("R",790),("D",526),("R",103),("D",367),("R",143),("D",41),("L",539),("D",735),("R",51),("D",172),("L",33),("U",241),("R",814),("D",981),("R",748),("D",699),("L",716),("U",647),("L",381),("D",351),("L",381),("D",121),("L",52),("U",601),("R",515),("U",713),("L",404),("U",45),("R",362),("U",670),("L",235),("U",102),("R",373),("U",966),("L",362),("U",218),("R",280),("U",951),("R",371),("U",378),("L",10),("U",670),("R",958),("D",423),("L",740),("U",888),("R",235),("U",899),("L",387),("U",167),("R",392),("D",19),("L",330),("D",916),("R",766),("D",471),("L",708),("D",83),("R",749),("D",696),("L",50),("D",159),("R",828),("U",479),("L",980),("D",613),("L",182),("D",875),("L",307),("U",472),("L",317),("U",999),("R",435),("D",364),("R",737),("U",550),("L",233),("U",190),("L",501),("U",610),("R",433),("U",470),("L",801),("U",52),("L",393),("D",596),("L",378),("U",220),("L",967),("D",807),("R",357),("D",179),("L",731),("D",54),("L",804),("D",865),("L",994),("D",151),("L",181),("U",239),("R",794),("D",378),("L",487),("U",408),("R",817),("U",809),("R",678),("D",599),("L",564),("U",480),("R",525),("D",189),("L",641),("D",771),("L",514),("U",72),("L",248),("D",334),("L",859),("D",318),("R",590),("D",571),("R",453),("U",732),("R",911),("U",632),("R",992),("D",80),("R",490),("D",234),("L",710),("U",816),("L",585),("U",180),("L",399),("D",238),("L",103),("U",605),("R",993),("D",539),("R",330)]
w2 = [("L",996),("U",383),("L",962),("U",100),("L",836),("D",913),("R",621),("U",739),("R",976),("D",397),("L",262),("D",151),("L",12),("U",341),("R",970),("U",123),("L",713),("U",730),("L",52),("D",223),("L",190),("D",81),("R",484),("D",777),("R",374),("U",755),("R",640),("D",522),("R",603),("D",815),("R",647),("U",279),("R",810),("U",942),("R",314),("D",19),("L",938),("U",335),("R",890),("U",578),("R",273),("U",338),("R",186),("D",271),("L",230),("U",90),("R",512),("U",672),("R",666),("D",328),("L",970),("U",17),("R",368),("D",302),("L",678),("D",508),("L",481),("U",12),("L",783),("D",409),("L",315),("D",579),("L",517),("D",729),("R",961),("D",602),("R",253),("D",746),("R",418),("D",972),("R",195),("D",270),("L",46),("D",128),("L",124),("U",875),("R",632),("D",788),("L",576),("U",695),("R",159),("U",704),("R",599),("D",597),("R",28),("D",703),("L",18),("D",879),("L",417),("U",633),("L",56),("U",302),("R",289),("U",916),("R",820),("D",55),("R",213),("U",712),("R",250),("D",265),("L",935),("D",171),("L",680),("U",738),("L",361),("D",939),("R",547),("D",606),("L",255),("U",880),("R",968),("U",255),("R",902),("D",624),("L",251),("U",452),("L",412),("D",60),("L",996),("D",140),("L",971),("U",196),("R",796),("D",761),("L",54),("U",54),("L",98),("D",758),("L",521),("U",578),("L",861),("U",365),("L",901),("D",495),("L",234),("D",124),("L",121),("D",329),("L",38),("U",481),("L",491),("D",938),("L",840),("D",311),("L",993),("D",954),("R",654),("U",925),("L",528),("D",891),("L",994),("D",681),("L",879),("D",476),("L",933),("U",515),("L",292),("U",626),("R",348),("D",963),("L",145),("U",230),("L",114),("D",11),("R",651),("D",929),("R",318),("D",672),("R",125),("D",827),("L",590),("U",338),("L",755),("D",925),("L",577),("D",52),("R",131),("D",465),("R",657),("D",288),("R",22),("D",363),("R",162),("D",545),("L",904),("D",457),("R",987),("D",389),("L",566),("D",931),("L",773),("D",53),("R",162),("U",271),("L",475),("U",666),("L",594),("U",733),("R",279),("D",847),("R",359),("U",320),("R",450),("D",704),("L",698),("D",173),("R",35),("D",267),("L",165),("D",66),("L",301),("U",879),("R",862),("U",991),("R",613),("D",489),("L",326),("D",393),("R",915),("U",718),("R",667),("U",998),("R",554),("U",199),("R",300),("U",693),("R",753),("U",938),("R",444),("U",12),("L",844),("D",912),("R",297),("D",668),("R",366),("U",710),("L",821),("U",384),("R",609),("D",493),("R",233),("U",898),("R",407),("U",683),("R",122),("U",790),("L",1),("U",834),("L",76),("U",572),("R",220),("U",752),("L",728),("D",85),("L",306),("D",805),("R",282),("U",507),("R",414),("D",687),("L",577),("U",174),("L",211),("U",308),("L",15),("U",483),("R",741),("D",828),("L",588),("D",192),("L",409),("D",605),("L",931),("U",260),("L",239),("D",424),("L",846),("U",429),("L",632),("U",122),("L",266),("D",544),("R",248),("U",188),("R",465),("U",721),("R",621),("U",3),("L",884),("U",361),("L",322),("U",504),("R",999),("U",381),("R",327),("U",555),("L",467),("D",849),("R",748),("U",175),("R",356)]
 

def place(wire):
    """ Returns a (long) coordinate list of all the corners
    """
    y = 0
    x = 0
    result = [(x,y)]
    for z in wire:
        if z[0] == "R":
            x = x + z[1]
            result.append((y,x))
        elif z[0] == "L":
            x = x - z[1]
            result.append((y,x))
        elif z[0] == "U":
            y = y + z[1]
            result.append((y,x))
        elif z[0] == "D":
            y = y - z[1]
            result.append((y,x))
        else:
            return("Error")
    return result

def compare(L1, L2):
    """ Compares two wires to find their overlaps.
    If I compare each pair of adjacent coords in one wire against each pair in the other wire, I can evaluate if there is an overlap.
    """
    cross = []
    z = 0
    while z < len(L2)-1:
        for i in range(0, len(L1)-1):
            a0, b0 = L1[i][0], L1[i][1]
            a1, b1 = L1[i+1][0], L1[i+1][1]
            x0, y0 = L2[z][0], L2[z][1]
            x1, y1 = L2[z+1][0], L2[z+1][1]
            # check which way they are perpendicular
            if (a0 == a1 and y0 == y1) and (b0 <= y0 <= b1 or b0 >= y0 >= b1) and (x0 <= a0 <= x1 or x0 >= a0 >= x1):
                cross.append((a0, y0, i, z))
            elif (b0 == b1 and x0 == x1) and (y0 <= b0 <= y1 or y0 >= b0 >= y1) and (a0 <= x0 <= a1 or a0 >= x0 >= a1):
                cross.append((x0, b0, i, z))
        z += 1
    return cross

def distance(L):
    """ Takes a list of cross points and calculates the taxicab distance for each.
    """
    distance = []
    for x in L:
        distance.append(abs(x[0])+abs(x[1]))
    return distance
        
def steps(L):
    """ Takes a list of cross points and calculates the number of steps for each.
    """
    steps = []
    for j in L:
        i = 0
        z = 0
        for x in range(0, j[2]):
            i += w1[x][1]
        for y in range(0, j[3]):
            z += w2[y][1]
        # figure out direction of line
        p0 = (j[0], j[1])
        p1 = place(w1)[j[2]]
        p2 = place(w2)[j[3]]
        if p0[0] == p1[0]:
            i += abs(p0[1]-p1[1])
            z += abs(p0[0]-p2[0])
        else:
            i += abs(p0[0]-p1[0])
            z += abs(p0[1]-p2[1])
        steps.append(i+z)
    return steps
            
# print(place(w1))
# print(place(w2))
# print(compare(place(w1), place(w2)))
print(steps(compare(place(w1), place(w2))))
print(min(steps(compare(place(w1), place(w2)))))
